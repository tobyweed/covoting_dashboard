1 + 1
library(tidyverse)
conn <- GraphqlClient$new(url = snapshot_endpt)
snapshot_endpt <- 'https://hub.snapshot.org/graphql'
conn <- GraphqlClient$new(url = snapshot_endpt)
conn <- GraphqlClient$new(url = snapshot_endpt)
library(ghql)
conn <- GraphqlClient$new(url = snapshot_endpt)
source("~/workspace/metagov/covoting_dashboard/data.R", echo=TRUE)
source("~/workspace/metagov/covoting_dashboard/data.R", echo=TRUE)
getVotesFromSpace <- function(space, nprops, nvotes) {
proposal_df <- getProps(prop_query, nprops, space)
prop_ids <- proposal_df$data.proposals.id  # get list of proposal IDs
# store all the votes from every proposal in a big list
votes_list <- list() # DF to store all the votes gathered
for(i in 1:length(prop_ids)) {
votes <- getVotes(vote_query, nvotes, prop_ids[i])
votes_list[[i]] <- votes
}
votes_list
}
getVotesFromSpace("poh.eth", 1000, 100000)
source("~/workspace/metagov/covoting_dashboard/data_utils.R", echo=TRUE)
getVotesFromSpace("poh.eth", 1000, 100000)
library(jsonlite)
getVotesFromSpace("poh.eth", 1000, 100000)
votes_list <- getVotesFromSpace("poh.eth", 1000, 100000)
View(votes_list)
# turn a list of votes dfs into a df of votes.
# Removes all but single-choice votes (i.e. filters out approval votes)
# params:
#   - votes_list: list of dfs of votes
votesListToDF <- function(votes_list) {
# use only elements with single-choice voting (causes problems with dplyr::bind_row() and don't know how to process later anyways)
votes_list_singlechoice <- list()
for(df in votes_list) {
if(typeof(df$data.votes.choice) == "integer") {
votes_list_singlechoice[[length(votes_list_singlechoice) + 1]] <- df
}
}
# gather the data into one big dataframe
votes_df <- bind_rows(votes_list_singlechoice)
# flatten problematic nested object cols
votes_df$Proposal.ID <- votes_df$`data.votes.proposal`$id
votes_df$Space.ID <- votes_df$`data.votes.space`$id
votes_df <- votes_df %>% select(-c(data.votes.proposal, data.votes.space))
# rename cols
votes_df <- votes_df %>%
rename(ID = data.votes.id,
Voter.ID = data.votes.voter,
Weight = data.votes.vp,
Time.Created = data.votes.created,
Choice = data.votes.choice)
votes_df
}
votes_df <- votesListToDF(votes_list)
View(votes_df)
# filter out votes from all but nprops of the most recent proposals that have less than agree_thresh percentage consensus
# params:
#   - votes_df
#   - agree_thresh: threshold proportion of intraproposal vote agreement to filter out, e.g. 0.99
#   - nprops: number of proposals to take votes from, after filtering out consensus
filterVotes <- function(votes_df, agree_thresh, nprops) {
# label votes by the total votes in the prop, number of votes w that choice, and proportion of votes with that choice
votes_df <- votes_df %>%
group_by(Proposal.ID) %>%
mutate(Tot.Votes = sum(Weight)) %>%
group_by(Proposal.ID, Choice) %>%
mutate(N.Votes = sum(Weight)) %>%
mutate(Prop.Votes = N.Votes/Tot.Votes) %>%
ungroup()
# check maximum proportion and filter out ones with too much agreement
votes_df <- votes_df %>%
group_by(Proposal.ID) %>%
mutate(Max.Prop = max(Prop.Votes)) %>%
filter(Max.Prop < agree_thresh)
# get 20 most recent proposals' start times
props_df <- votes_df %>%
mutate(Time.Started = min(Time.Created)) %>%
summarise(Time.Started = unique(Time.Started)) %>%
arrange(-Time.Started) %>%
head(nprops)
# earliest vote in the 20th-oldest proposal
min_age <- min(props_df$Time.Started)
# filter out votes that happened earlier than this
votes_df %>%
filter(Time.Created >= min_age)
}
votes_df <- filterVotes(votes_df, 0.99, 20)
View(votes_df)
write.csv(votes_df, "poh_votes.csv", row.names = FALSE)
votes <- read.csv("poh_votes.csv", colClasses = c("Voter.ID" = "character", "Proposal.ID" = "character")) # IDs will be read as hex
View(votes)
rm(votes)
votes <- read.csv("poh_votes.csv", colClasses = c("Voter.ID" = "character", "Proposal.ID" = "character")) # IDs will be read as hex if character not specified
View(votes)
View(votes)
proposals <- unique(votes$Proposal.ID)
voters <- unique(votes$Voter.ID)
vot_tab <- data.frame(matrix(nrow = length(voters), ncol= length(proposals)))
proposals
View(vot_tab)
colnames(vot_tab) <- proposals
rownames(vot_tab) <- voters
View(vot_tab)
View(vot_tab)
votes
votes
votes %>%
group_by(proposals)
library(dplyr)
votes %>%
group_by(proposals)
votes %>%
group_by(Proposal.ID)
votes %>%
filter(Proposal.ID == "0x6867a9056ea8b2525b323bf2be88d63945dfd80f76b1e8eaebcefca44e871b89")
?top_n
votes_remaining <- votes
for(i in 1:ncol(vot_tab)) {
prop_votes <- filter(votes_remaining, Proposal.ID == proposals[i]) # the votes cast on this proposal
for(v in prop_votes) {
vot_tab[v$Proposal.ID,v$Voter.ID] <- v$Choice
}
votes_remaining <- anti_join(votes, prop_votes)
}
votes_remaining <- votes
for(i in 1:ncol(vot_tab)) {
prop_votes <- filter(votes_remaining, Proposal.ID == proposals[i]) # the votes cast on this proposal
for(v in prop_votes) {
print(v)
vot_tab[v$Proposal.ID,v$Voter.ID] <- v$Choice
}
votes_remaining <- anti_join(votes, prop_votes)
}
prop_votes <- filter(votes_remaining, Proposal.ID == proposals[i])
View(prop_votes)
votes_remaining <- votes
for(i in 1:ncol(vot_tab)) {
prop_votes <- filter(votes_remaining, Proposal.ID == proposals[i]) # the votes cast on this proposal
for(v in prop_votes) {
print(v)
# vot_tab[v$Proposal.ID,v$Voter.ID] <- v$Choice
}
votes_remaining <- anti_join(votes, prop_votes)
}
votes_remaining <- votes
prop_votes <- filter(votes_remaining, Proposal.ID == proposals[i]) # the votes cast on this proposal
prop_votes
print(v[1])
v[1]
v in prop_votes
votes_remaining <- votes
for(i in 1:ncol(vot_tab)) {
prop_votes <- filter(votes_remaining, Proposal.ID == proposals[i]) # the votes cast on this proposal
for(j in 1:nrow(prop_votes)) {
v <- prop_votes[j,]
vot_tab[v$Proposal.ID,v$Voter.ID] <- v$Choice
}
votes_remaining <- anti_join(votes, prop_votes)
}
View(vot_tab)
votes_remaining <- votes
i <- 0
prop_votes <- filter(votes_remaining, Proposal.ID == proposals[i])
i <- 0
prop_votes <- filter(votes_remaining, Proposal.ID == proposals[i])
votes_remaining
proposals[i]
proposals
proposals[i]
proposals[1]
i <- 1
prop_votes <- filter(votes_remaining, Proposal.ID == proposals[i])
prop_votes
View(prop_votes)
j <- 1
nrow(prop_votes)
v <- prop_votes[j,]
v
vot_tab <- data.frame(matrix(nrow = length(voters), ncol= length(proposals)))
vot_tab[v$Proposal.ID,v$Voter.ID] <- v$Choice
vot_Tab[v$Proposal.ID,v$Voter.ID]
vot_tab[v$Proposal.ID,v$Voter.ID]
v$Choice
View(vot_tab)
v$Proposal.ID
v$Voter.ID
View(vot_tab)
vot_tab <- data.frame(matrix(nrow = length(voters), ncol= length(proposals)))
colnames(vot_tab) <- proposals
rownames(vot_tab) <- voters
v
vot_tab[v$Proposal.ID,v$Voter.ID]
vot_tab[1,1]
toString(v$Choice)
vot_tab[toString(v$Proposal.ID),toString(v$Voter.ID)]
toString(v$Proposal.ID)
toString(v$Voter.ID)
vot_tab[toString(v$Proposal.ID),toString(v$Voter.ID)]
colnames(v)
colnames(vot_tab)
colnames(vot_tab)[1]
vot_tab["0x6867a9056ea8b2525b323bf2be88d63945dfd80f76b1e8eaebcefca44e871b89",]
rownames(vot_tab)[1]
vot_tab["0x6867a9056ea8b2525b323bf2be88d63945dfd80f76b1e8eaebcefca44e871b89", "0x5700F03F87db485fdb90e18b3100F00b235886f1"]
vot_tab[, "0x5700F03F87db485fdb90e18b3100F00b235886f1"]
vot_tab[, "0x5700F03F87db485fdb90e18b3100F00b235886f1"]
rownames(vot_tab)[1]
vot_tab["0x6867a9056ea8b2525b323bf2be88d63945dfd80f76b1e8eaebcefca44e871b89","0x5700F03F87db485fdb90e18b3100F00b235886f1"]
vot_tab["0x5700F03F87db485fdb90e18b3100F00b235886f1", "0x6867a9056ea8b2525b323bf2be88d63945dfd80f76b1e8eaebcefca44e871b89"]
vot_tab[toString(v$Voter.ID), toString(v$Proposal.ID)]
vot_tab[toString(v$Voter.ID), toString(v$Proposal.ID)] <- v$Choice
# make a table with rows=voters and cols=proposals, with cell values=how they voted.
proposals <- unique(votes$Proposal.ID)
voters <- unique(votes$Voter.ID)
vot_tab <- data.frame(matrix(nrow = length(voters), ncol= length(proposals)))
colnames(vot_tab) <- proposals
rownames(vot_tab) <- voters
votes_remaining <- votes
for(i in 1:ncol(vot_tab)) {
prop_votes <- filter(votes_remaining, Proposal.ID == proposals[i]) # the votes cast on this proposal
for(j in 1:nrow(prop_votes)) {
v <- prop_votes[j,]
vot_tab[toString(v$Voter.ID), toString(v$Proposal.ID)] <- v$Choice
}
votes_remaining <- anti_join(votes, prop_votes)
}
# make the cols a little nicer
colnames(vot_tab) <- 1:length(proposals)
rownames(vot_tab) <- 1:length(voters)
# make a table with rows=voters and cols=proposals, with cell values=how they voted.
proposals <- unique(votes$Proposal.ID)
voters <- unique(votes$Voter.ID)
vot_tab <- data.frame(matrix(nrow = length(voters), ncol= length(proposals)))
colnames(vot_tab) <- proposals
rownames(vot_tab) <- voters
votes_remaining <- votes
for(i in 1:ncol(vot_tab)) {
prop_votes <- filter(votes_remaining, Proposal.ID == proposals[i]) # the votes cast on this proposal
for(j in 1:nrow(prop_votes)) {
v <- prop_votes[j,]
vot_tab[toString(v$Voter.ID), toString(v$Proposal.ID)] <- v$Choice
}
votes_remaining <- anti_join(votes_remaining, prop_votes)
}
vot_mat <- data.matrix(vot_tab, rownames.force = NA)
votes %>%
filter(Proposal.ID == "0x6867a9056ea8b2525b323bf2be88d63945dfd80f76b1e8eaebcefca44e871b89")
rm(votes_remaining)
?data.matrix
votes %>%
filter(Proposal.ID == "0x6867a9056ea8b2525b323bf2be88d63945dfd80f76b1e8eaebcefca44e871b89")
na_counts <- rowSums(is.na(vot_tab))
table(na_counts)
mean(na_counts)
na_counts
sum(na_counts)
nrow(vot_tab)
sum(na_counts)/(nrow(vot_tab)*ncol(vot_tab))
View(votes)
# get max weights
# get a list of weights per voter
votes %>%
group_by(Voter.ID)
# get max weights
# get a list of weights per voter
votes %>%
group_by(Voter.ID) %>%
mutate(Max.Weight = max(Weight))
# compute the gini coefficient of a given distribution
gini <- function(dist) {
# area between Lorenz curve and line of equality
num <- 0
for(x in dist) {
for(y in dist) {
num <- num + abs(x - y)
}
}
# area below line of equality
denom <- 2*(length(dist))^2*mean(dist)
num/denom
}
prop_votes$Weight
for(p in 1:ncol(vot_tab)) {
prop_votes <- filter(votes_remaining, Proposal.ID == proposals[i])
token_dists <- append(token_dists, prop_votes$Weight)
}
for(p in 1:ncol(vot_tab)) {
prop_votes <- filter(votes, Proposal.ID == proposals[i])
token_dists <- append(token_dists, prop_votes$Weight)
}
# gini coeff of token dist
token_dists <- c()
for(p in 1:ncol(vot_tab)) {
prop_votes <- filter(votes, Proposal.ID == proposals[i])
token_dists <- append(token_dists, prop_votes$Weight)
}
token_dists
prop_votes$Weight
for(p in 1:ncol(vot_tab)) {
prop_votes <- filter(votes, Proposal.ID == proposals[i])
token_dists[[p]] <- prop_votes$Weight
}
# gini coeff of token dist
token_dists <- list()
for(p in 1:ncol(vot_tab)) {
prop_votes <- filter(votes, Proposal.ID == proposals[i])
token_dists[[p]] <- prop_votes$Weight
}
votes_list
View(votes_list)
prop_votes$Weight
View(token_dists)
for(p in 1:ncol(vot_tab)) {
prop_votes <- filter(votes, Proposal.ID == proposals[p])
token_dists[[p]] <- prop_votes$Weight
}
# gini coeff of token dist
token_dists <- list()
for(p in 1:ncol(vot_tab)) {
prop_votes <- filter(votes, Proposal.ID == proposals[p])
token_dists[[p]] <- prop_votes$Weight
}
View(token_dists)
gini(token_dists[1])
token_dists[1]
token_dists[[1]]
gini(token_dists[[1]])
gini(token_dists[[2]])
gini(token_dists[[3]])
barplot(token_dists[[1]])
barplot(token_dists[[2]])
barplot(token_dists[[3]])
barplot(token_dists[[4]])
gini(token_dists[[4]])
barplot(token_dists[[4]])
sort(token_dists[[4]])
barplot(sort(token_dists[[4]]))
gini(sort(token_dists[[4]]))
barplot(sort(token_dists[[4]]))
barplot(sort(token_dists[[1]]))
gini(sort(token_dists[[1]]))
token
?Gini
library(DescTools)
install.packages("DescTools")
library(DescTools)
Gini(token_dists[[4]])
Gini(token_dists[[4]])
gini(token_dists[[4]])
Gini(token_dists[[4]])
gini(sort(token_dists[[1]]))
gini(sort(token_dists[[4]]))
gini(sort(token_dists[[4]]))
Gini(token_dists[[4]])
gini(sort(token_dists[[4]]))
Gini(sort(token_dists[[4]]))
barplot(sort(token_dists[[4]]))
gini(sort(token_dists[[4]]))
gini(sort(token_dists[[1]]))
gini(sort(token_dists[[1]]))
Gini(sort(token_dists[[1]]))
barplot(sort(token_dists[[1]]))
barplot(sort(token_dists[[4]]))
gini(c(0,1))
gini(c(0,0,0,0,0,0,0,0,1))
gini(c(0,0,0,0,0,0,0,1))
Gini(c(0,0,0,0,0,0,0,1))
Gini(c(0,0,0,0,0,0,0,1))
Gini(c(0,0,0,0,0,0,0,1))
Gini(c(0,1))
?Gini
Gini(sort(token_dists[[1]]), unbiased = FALSE)
Gini(c(0,1), unbiased = FALSE)
Gini(c(0,1))
Gini(c(0,1), unbiased = FALSE)
gini(sort(token_dists[[1]]))
Gini(sort(token_dists[[1]]), unbiased = FALSE)
# barplot(sort(token_dists[[4]]))
gini(token_dists)
lapply(token_dists, gini)
# barplot(sort(token_dists[[4]]))
mean(lapply(token_dists, gini))
# barplot(sort(token_dists[[4]]))
ginis <- lapply(token_dists, gini))
# barplot(sort(token_dists[[4]]))
ginis <- lapply(token_dists, gini)
ginis
str(ginis)
View(ginis)
unlist(ginis)
mean(unlist(ginis))
